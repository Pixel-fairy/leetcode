# Question
We are given an array asteroids of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.
For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.
Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. 
Two asteroids moving in the same direction will never meet.

Example 1:
Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.

Example 2:
Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.

Example 3:
Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.

#my solution 

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:
        stack = []
        for ast in asteroids:
            while stack and stack[-1] > 0 and ast < 0:
                last = stack.pop()
                if last > -ast:
                    stack.append(last)
                    break
                elif last == -ast:
                    break
            else:
                stack.append(ast)
        return stack


## optimized solution 

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:
        stack = []  # To store asteroids that have not been destroyed

        for asteroid in asteroids:
            # Check for collisions only when there's a potential conflict
            while stack and asteroid < 0 < stack[-1]:
                if abs(asteroid) > stack[-1]:
                    # Current asteroid destroys the top of the stack
                    stack.pop()
                    continue  # Check again for further collisions
                elif abs(asteroid) == stack[-1]:
                    # Both asteroids destroy each other
                    stack.pop()
                break  # No further collision is possible, stop the loop
            else:
                # No collision, add the asteroid to the stack
                stack.append(asteroid)

## Documentation


        return stack

