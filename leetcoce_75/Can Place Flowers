##Question
You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, 
return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.


## my first iteration

class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        
        #there should be continious 3 0's == one plant
        len1=len(flowerbed)
        count=0
        
        for i in range (len1):
             if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len1 - 1 or flowerbed[i + 1] == 0):
                count+=1
                if(count==3):
                    n=n-1
                    count=0
             else:
                continue
            
        if(n==0):
            return True
        else:
            return False

- this code passed some tests but it can not deal with the corner cases like [ 0 , 0 , 1 ] 


## my solution

class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        f= [0] + flowerbed + [0]

        for i in range(1,len(f)-1):
            #skipping it so than we donot have to write corner cases
            if f[i-1] == 0 and f[i] == 0 and f[i+1] == 0:
                f[i] = 1
                n-=1
        return n<=0

- this code increase the space complexity o(n) in place of o(1)

## optimized solution

class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        empty =0 if flowerbed[0] else 1
        for f in flowerbed:
            if f:
                n-=int((empty-1) / 2) 
                # int division, round towards zero (if answer becomes -1)
                empty =0
            else:
                empty +=1
                
        n-= (empty) // 2 
        # for the end corner case for array like [ 1, 0 , 1 , 0 , 0 ]
        return n<=0

## solution in c

#include <stdbool.h>

bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {
    int empty = flowerbed[0] ? 0 : 1; // Initialize empty count based on the first position
    for (int i = 0; i < flowerbedSize; i++) {
        if (flowerbed[i]) {
            // Place flowers in the previous empty spaces
            n -= (empty - 1) / 2;
            empty = 0; // Reset empty count
        } else {
            empty++; // Increment empty count for consecutive zeros
        }
    }
    
    // Handle the case for the end of the array
    n -= empty / 2;

    // Return true if all required flowers can be placed
    return n <= 0;
}


##documentation##
