## Question
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

## first iteration of the solution 

class Solution(object):
    # 1 2 4 3   5 
    # 5 1 2 3 4
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        right,left=0,len(height)
        
        while right<left:
            if(height[right]>height[left]):
                left-=1
            elif(height[right]<height[left]):
                right+=1

        # THIS IS AN INFINITY LOOP

        length=max(right,left)
        width=abs((left-right)+1) 

        # WIDTH IS THE THE GAP BETWEEN THE BORDERS , SO JUST abs(left-right) 
         ALSO LEFT>RIGHT ALWAYS SO JUST (left-right)

        return length*width


## my solution

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        left, right = 0, len(height) - 1  # Initialize pointers
        max_area = 0  # Variable to store the maximum area

        # Use a two-pointer approach
        while left < right:
            # Calculate the current area
            current_area = min(height[left], height[right]) * (right - left)
            # Update max_area if the current area is larger
            max_area = max(max_area, current_area)

            # Move the pointer pointing to the shorter height
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1

        return max_area


## Brute force

class Solution(object):
    def maxArea(self, height):
        res=0
        
        for l in range(len(height)):
            for r in range(l+1 , len(height)):
                area = (r-l)*min(height[l],height[r])
                res = max(res , area)
        return
    # try out all the combinations


## optimized solution

class Solution(object):
    def maxArea(self, height):
      
      pointerR=len(height)-1
      pointerL=0

      MaxArea=0
      maxH = max(height)

      while pointerL<pointerR:
        if  height[pointerL]>height[pointerR]:
            Q = height[pointerR] *(pointerR-pointerL)
            MaxArea= Q if Q>MaxArea else MaxArea
            pointerR -=1
        else:
            Q= height[pointerL]*(pointerR-pointerL)
            MaxArea= Q if Q>MaxArea else MaxArea
            pointerL +=1
        if MaxArea >= maxH*(pointerR-pointerL):break

      return MaxArea


## solution in c

#include <stdio.h>

int maxArea(int* height, int heightSize) {
    int pointerR = heightSize - 1;
    int pointerL = 0;

    int MaxArea = 0;
    int maxH = 0;

    // Find the maximum height in the array
    for (int i = 0; i < heightSize; i++) {
        if (height[i] > maxH) {
            maxH = height[i];
        }
    }

    // Two-pointer approach to calculate max area
    while (pointerL < pointerR) {
        int Q;
        if (height[pointerL] > height[pointerR]) {
            Q = height[pointerR] * (pointerR - pointerL);
            MaxArea = (Q > MaxArea) ? Q : MaxArea;
            pointerR--;
        } else {
            Q = height[pointerL] * (pointerR - pointerL);
            MaxArea = (Q > MaxArea) ? Q : MaxArea;
            pointerL++;
        }

        // Break if no larger area is possible
        if (MaxArea >= maxH * (pointerR - pointerL)) {
            break;
        }
    }

    return MaxArea;
}

// Example usage
int main() {
    int height[] = {1, 2, 4, 3, 5};
    int heightSize = sizeof(height) / sizeof(height[0]);
    
    int result = maxArea(height, heightSize);
    printf("Maximum Area: %d\n", result);

    return 0;
}

##documentation
- if there is any pattern where we have to compare from start and from the end == 2 pointers method
and [while right<left] condition
