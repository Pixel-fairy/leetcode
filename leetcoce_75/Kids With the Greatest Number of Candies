##Question
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has,and 
an integer extraCandies,denoting the number of extra candies that you have.
Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or
false otherwise

## my solution

class Solution(object):
    def kidsWithCandies(self, candies, extraCandies):
        maxcandies = max(candies)

        return [(curnum + extraCandies >= maxcandies) for curnum in candies]

## optimized solution

class Solution(object):
    def kidsWithCandies(self, candies, extraCandies):
        result = []
        maxCandies =  max(candies)
        
        for i in candies:
            if i + extraCandies >= maxCandies:
                result.append(True)
            else:
                result.append(False)
        return result

## solution in c

#include <stdio.h>
#include <stdbool.h>

void kidsWithCandies(int candies[], int size, int extraCandies, bool result[]) {
    int maxCandies = candies[0];

    // Find the maximum number of candies in a single pass
    for (int i = 1; i < size; i++) {
        if (candies[i] > maxCandies) {
            maxCandies = candies[i];
        }
    }

    // Check if each kid can have the maximum candies or more
    for (int i = 0; i < size; i++) {
        result[i] = (candies[i] + extraCandies >= maxCandies);  // Direct assignment of result
    }
}

int main() {
    int candies[] = {2, 3, 5, 1, 3};
    int size = sizeof(candies) / sizeof(candies[0]);
    int extraCandies = 3;
    bool result[size];

    kidsWithCandies(candies, size, extraCandies, result);

    // Print the result as an array
    printf("[");
    for (int i = 0; i < size; i++) {
        printf(result[i] ? "True" : "False");  // Print "True" or "False"
        if (i < size - 1) {
            printf(", ");  // Add a comma after each element except the last one
        }
    }
    printf("]\n");

    return 0;
}


##documentation##
