## Question
Given a binary array nums, you should delete one element from it.
Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

Example 1:
Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].

Example 2:
Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


## first iteration

class Solution:
    def longestSubarray(self, nums):
       # Input: nums = [1,1,0,1,0,1]
       # [0,1,1,1,0,1,1,0,1]
       #  i
       # curr_count=0
       # Output: 3             
        
        k=1 # deleting 0
        count=0
        for i in range(len(nums)):
            if(nums[i]==1):
                curr_count+=1
            elif(nums[i]==0 and k > 0):
                curr_count+=1
                k-=1
            elif(k<0):
                k+=1 
                curr_count=0
                # repositioning
            count=max(count,curr_count-1)
        return count

RESETTING CURR_COUNT TO 0 IS INCORRECT:
When encountering a second 0 (k < 0), you reset curr_count = 0, which breaks the continuity of the sliding window.
This causes your code to incorrectly count subarrays and underestimate the result


## my solution

class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        max_len = 0
        start = 0
        zero = -1
        for i in range(len(nums)):
            if nums[i] == 0:
                start = zero + 1
                zero = i
            max_len = max(max_len, i - start)
        return max_len   


## documentation
