##Question
You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.
Return the merged string.


##my solution

class Solution(object):
    def mergeAlternately(self, word1 , word2):
        i,j = 0,0
        res = []

        while i < len(word1) and j < len(word2):
            res.append(word1[i])
            res.append(word2[j])
            i +=1
            j +=1
        res.append(word1[i:])
        res.append(word2[j:])
        return "".join(res)


##optimised solution 

class Solution(object):
    def mergeAlternately(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: str
        """
        i = 0
        j = 0
        res = ""
        while (i < len(word1) and j < len(word2)):
            res += word1[i] + word2[j]
            i += 1
            j += 1
        
        if (i < len(word1)):
            res += word1[i:]

        if (j < len(word2)):
            res += word2[j:]


        return res


## solution in c

#include <stdio.h>
#include <string.h>

void mergeAlternately(const char* word1, const char* word2, char* result) {
    int i = 0, j = 0, k = 0;

    // Merge alternately
    while (word1[i] != '\0' && word2[j] != '\0') {
        result[k++] = word1[i++];
        result[k++] = word2[j++];
    }

    // Append the remaining characters from word1
    while (word1[i] != '\0') {
        result[k++] = word1[i++];
    }

    // Append the remaining characters from word2
    while (word2[j] != '\0') {
        result[k++] = word2[j++];
    }

    result[k] = '\0'; // Null-terminate the result
}

int main() {
    const char* word1 = "abc";
    const char* word2 = "pqr";
    char result[100]; // Assuming a maximum result length of 100 characters

    mergeAlternately(word1, word2, result);
    printf("Merged String: %s\n", result);

    return 0;
}
