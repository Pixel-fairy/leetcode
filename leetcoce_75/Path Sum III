## my solution
from collections import Counter
from typing import Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def pathSum(self, root: Optional[TreeNode], target_sum: int) -> int:
        def dfs(node, current_sum):
            if node is None:
                return 0

            # Update current path sum
            current_sum += node.val
            
            # Count paths that sum to target_sum
            path_count = prefix_sum_count[current_sum - target_sum]

            # Add current sum to the prefix sum counter
            prefix_sum_count[current_sum] += 1

            # Explore left and right subtrees
            path_count += dfs(node.left, current_sum)
            path_count += dfs(node.right, current_sum)

            # Remove the current sum from counter before backtracking
            prefix_sum_count[current_sum] -= 1

            return path_count

        # Dictionary to store prefix sum frequencies
        prefix_sum_count = Counter({0: 1})

        return dfs(root, 0)

## second formate of the same code 
from collections import defaultdict
from typing import Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def pathSum(self, root: Optional[TreeNode], target_sum: int) -> int:
        def dfs(node, current_sum):
            if not node:
                return

            # Update current sum
            current_sum += node.val
            required_sum = current_sum - target_sum

            # Check if there are paths that sum to target_sum
            if required_sum in prefix_sum_count:
                self.count += prefix_sum_count[required_sum]

            # Update prefix sum count
            prefix_sum_count[current_sum] += 1

            # Recur for left and right subtrees
            dfs(node.left, current_sum)
            dfs(node.right, current_sum)

            # Backtrack: Remove current sum before returning to the parent node
            prefix_sum_count[current_sum] -= 1

        # Initialize variables
        self.count = 0
        prefix_sum_count = defaultdict(int)
        prefix_sum_count[0] = 1  # To handle cases where path starts from root

        dfs(root, 0)
        return self.count

## difference between the 2
-First Code: Uses return values for counting paths.
-Second Code: Uses a class variable (self.count) to store results.
-Both Work, but the second is more readable and avoids extra return statements.
